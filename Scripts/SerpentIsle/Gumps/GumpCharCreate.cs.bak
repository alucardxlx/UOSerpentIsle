
//////////////////////////////////////////////////////////////////////
// Automatically generated by Bradley's GumpStudio and roadmaster's 
// exporter.dll,  Special thanks goes to Daegon whose work the exporter
// was based off of, and Shadow wolf for his Template Idea.
//////////////////////////////////////////////////////////////////////
//#define RunUo2_0

using System;
using Server;
using Server.Gumps;
using Server.Network;
using Server.Commands;
using Server.Items;
using Server.Regions;
using Felladrin.Commands;
using VitaNex.Items;
using VitaNex.SuperGumps.UI;

namespace Server.Gumps
{
    public class GumpCharCreate : Gump
    {
        static Mobile caller;

        public static void Initialize()
        {
            CommandSystem.Register("CharCreate", AccessLevel.Player, new CommandEventHandler(_OnCommand));
        }

        [Usage("[CharCreate")]
        [Description("Calls the Character Creation gump. Must be at the SPEL.")]
        public static void _OnCommand(CommandEventArgs e)
        {
            caller = e.Mobile;

            if (caller.HasGump(typeof(GumpCharCreate)))
            {
                caller.CloseGump(typeof(GumpCharCreate));
            }

            if(caller.Region.IsPartOf("the Serpent Pillar Expedition Launch"))
                caller.SendGump(new GumpCharCreate(caller));
        }

        public GumpCharCreate(Mobile from) : this()
        {
            caller = from;
        }

        public GumpCharCreate() : base( 200, 200 )
        {
            this.Closable=false;
			this.Disposable=true;
			this.Dragable=true;
			this.Resizable=false;

			AddPage(0);
			AddBackground(0, 0, 320, 240, 9200);
			AddLabel(48, 17, 54, @"Create New Character");
			AddButton(23, 64, 4005, 4007, (int)Buttons.Name, GumpButtonType.Reply, 0);
			AddLabel(65, 63, 0, @"Name");
			AddButton(154, 64, 4005, 4007, (int)Buttons.Sex, GumpButtonType.Reply, 0);
			AddButton(23, 108, 4005, 4007, (int)Buttons.Hair, GumpButtonType.Reply, 0);
			AddButton(23, 151, 4005, 4007, (int)Buttons.Beard, GumpButtonType.Reply, 0);
			AddButton(154, 108, 4005, 4007, (int)Buttons.HColor, GumpButtonType.Reply, 0);
			AddButton(154, 151, 4005, 4007, (int)Buttons.BColor, GumpButtonType.Reply, 0);
			AddLabel(198, 63, 0, @"Sex");
			AddLabel(65, 108, 0, @"Hair");
			AddLabel(65, 150, 0, @"Facial Hair");
			AddLabel(198, 108, 0, @"H. Color");
			AddLabel(198, 150, 0, @"B. Color");
			AddButton(128, 199, 247, 248, (int)Buttons.Submit, GumpButtonType.Reply, 0);
			AddBackground(427, 0, 250, 300, 9300);
			AddLabel(522, 12, 6, @"Guide");
			AddHtml( 447, 47, 209, 232, @"Welcome to Ultima Online Part 2: Serpent Isle! 

Please use this prompt to design your character. You can return to this prompt using the Character Create scroll in your backpack, or by entering the \""[createchar\"" command in chat. This scroll will be removed when you embark for the Serpent Isle.

Please also find in your backpack a Stat and Skill Study Guide, both of which can be used to design your starting class. If these books are not used, they will be removed when you embark for the Serpent Isle.

Finally, you have some starting gold, food, and a waterskin that can be refilled when in range of a trough or other source. Be certain you have completely prepared before you embark for the Serpent Isle.", true, true);
			

            
        }

        public enum Buttons
		{
			Name,
			Sex,
			Hair,
			Beard,
			HColor,
			BColor,
			Submit,
			buttonMale,
			buttonFemale,
		}


        public override void OnResponse(NetState sender, RelayInfo info)
        {
            Mobile from = sender.Mobile;

            switch(info.ButtonID)
            {
                case (int)Buttons.Name:
				{
                    from.SendGump(new NameChangeDeedGump(from.Backpack));
					break;
				}
				case (int)Buttons.Sex:
				{

					break;
				}
				case (int)Buttons.Hair:
				{
                    from.SendGump(new ChangeHairStyle.ChangeHairstyleGump(from, 0, false, ChangeHairStyle.ChangeHairstyleEntry.HairEntries));
					break;
				}
				case (int)Buttons.Beard:
				{
                    from.SendGump(new ChangeHairStyle.ChangeHairstyleGump(from, 0, true, ChangeHairStyle.ChangeHairstyleEntry.BeardEntries));
                    break;
				}
				case (int)Buttons.HColor:
				{
                    from.SendGump(new ChangeHairStyle.ChangeHairHueGump(from, 0, true, false, ChangeHairStyle.ChangeHairHueEntry.RegularEntries));
                    break;
				}
				case (int)Buttons.BColor:
				{
                    from.SendGump(new ChangeHairStyle.ChangeHairHueGump(from, 0, false, true, ChangeHairStyle.ChangeHairHueEntry.RegularEntries));
                    break;
				}
				case (int)Buttons.Submit:
				{

					break;
				}

            }
        }
    }
}
